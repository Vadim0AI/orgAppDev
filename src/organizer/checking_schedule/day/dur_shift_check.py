from src.organizer.checking_schedule.day import base_check
from src.organizer.links import path_day_temp
from src.organizer.get_unique_wb import get_unique_wb


def dur_shift_check(old_shedule: list[tuple], new_shedule: list[tuple], wb_from_db: list[tuple]) -> bool:
    """  
    Проверяет РБ для которых в БД табл. wb указаны специальные настройки, ограничивабщие сдвиги и изменение длительности. Если условия длительности и/или сдвигов нарушены - возвращает False.

    Parameters:
    old_shedule (list[tuple]): старое расписание (содержится в БД табл. dat_wb).
    new_shedule (list[tuple]): новое расписание (до этой проверки содержится пока только в excel и извлекается из него).
    wb_from_db (list[tuple]): список кортежей из БД табл. wb. (Все рабочие блоки и их настройки).
    
    Returns:
    check_result (bool): Результат проверки
    """

    
    # Посчитать кол-во РБ
    # Один большой РБ разделяется на несколько меньших
    # Более простой принцип:
    # Находится в прошлом расписании сначала ближайший особый РБ, получаем его
    #   длительность и время начала. Затем следующий.
    # Все - далее просто нельзя начинать РБ этого типа раньше этого времени, 
    # при этом сдвигать другие РБ этого типа ближе можно, но не раньше этого времени.
    # 

    # В интервале от начала одного РБ этого типа, до начала другого РБ этого типа не должно быть длительности большей, чем длительность первого РБ + свободная длительность предыдущих РБ такого типа.
    
    


    # 2. Проходим по списку уникальных РБ и сверяем его с БД wb, там где есть в settings
    #   'shift : right | duraton : fix' выполняем следующий алгоритм для выбранного РБ
    # 3. Получаем из нового расписания список только из этих РБ в соответсвии с их порядком,
    #   а также отдельный такой список для старого расписания.
    # 4. Получаем список интервалов для старого расписания с длительностью нужного РБ в них.
    # 5. Проходимся по списку с уникальными РБ нового расписания и проверяем вхождение в
    #   интевал старого расписания, для тех РБ которые входят в этот интервал суммируем 
    #   длительность и сверяем ее с длительностью РБ интервала (! не дительность самого 
    #   интервала) из старого расписания. 
    # 6. Если длительность старого меньше, чем сумма этих РБ + free_duration 
    #   - выводим ошибку (False), а также данные о месте ошибки.
    #   Иначе - вычисляем разницу и сохраняем в free_duration. 
    #   Изначально free_duration был установлен в 0.
    # 7. Продолжаем так, пока не пройдемся по всем РБ нового расписания этого типа.
    # 8. Затем возвращаемся к п.2, пока не пройдем так полный список уникальных РБ.
    # 9. Если все ок - то возвращаем True.

    # TODO:
    #   1. Проверка изменения длительности РБ.
    #   2. Проверка сдвигов РБ.
    #   * отдельно создать функцию для подсчета общего времени РБ за день.
    #   * отдельно создать функцию для проверки сдвига РБ.
    #   * функция для разбора settings превращение в словарь из БД табл. wb

    pass