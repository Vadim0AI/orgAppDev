
Работа orgApp происходит по РБ
Каждый РБ ставится новый таймер (по-сути отдельный поток)
В начале каждого РБ, выполняются задачи:
	1) На разовое закрытие
	2) На открытие
Затем на протяжении всего РБ с заданным коротким интервалом выполняется
задача на блокировку

Также в начале РБ начинаются отсчеты времени по 5 минут, которые:
1) проверяют, изменилось ли расписание;
2) (возможно, потом добавить): ведение учета реально выполненных АБ для
статистики и не только, учет выполненных измеримых показателей.
(и вообще - это окно для дальнейших возможных действий)

В конце каждого РБ:
1. Появляется окно kivy и уведомление о завершении текущего РБ и начале нового
с требованием от пользователя подтвердить переход в новый РБ
2. Параллельно с этим начинается отсчет времени: 2 минуты, на сохранение
файлов, и подтверждение от пользователя перехода к новому РБ

При этом, если пользователь подтверждает за 2 минуты, то в РБ ставится пометка
в столбце "Fact" с значением "1".
Иначе, ставится значение "0" и начинается следующий РБ.
Это время на подтверждение никак не влияет на статистику следующего РБ.

------------------------------------------------------------------------------

--------- Проверка заблаговременного составления
                                               расписания на сл. день ---------

Для составления расписания на сл. день нужно выбрать в меню "Day Tomorrow",
затем "edit". Автоматически в папке "future" создастся файл day с
соответствующим названием Day_dd_mm__dw.xlsx, если ранее он не был там создан.
Затем он откроется для редактирования и запустится таймер обратного отсчета


Ветки из которых можно редактировать расписание Day:
- в рамках заранее запланированного в расписании РБ;
- в любое время, при выполнении любого другого РБ, когда планы изменились, но
не более х раз;
- из режима "только расписание", когда расписание не было составлено заранее
вчера на сегодня.

- Правило составления расписания на завтра:
-- 1. Должен быть соответсвующий файл в папке
-- 2. Должно быть уделено не менее 10 минут на планирование в файле Day



------------------------------------------------------------------------------

--------- Черновик ---------

# Вход в систему;
# Проверяем наличие файла Day;
# Проверяем время и дату изменения файла Day;
# Если Day присутствует и был изменен вчера, а также если время последнего
# парсинга файла раньше времени изменения Day, то
# парсим Day в БД
# Сейчас правило, касаемо составления расписания на сл. день - нельзя
# добавлять и сдвигать развлекательные РБ, но заменять их можно
# также, если расписание не составлено заранее, то все что доступно - это
# без выхода в сеть составить расписание на сегодня до конца дня
# Более жесткий вариант - составить расписание на завтра (без выхода в сеть)
# и 1 час работы (можно на случай повторного нарушения правила)
# Правила корректировки расписания: 1) нельзя добавлять разв. РБ


# Получаем текущий АБ и время до следующего АБ в секундах
now_AB, delay = where_now_ab()
print(now_AB, delay)
time.sleep(delay)
print("Сейчас новый АБ")


# TODO:
#   * Определяем какой сейчас РБ:
#   * Проверяем было ли изменено расписание;
#   * Если было, то сколько раз меняли;
#   * Парсим Day из xlsx в БД;
#   * where_now - на подобии этой функции сделать то же самое для РБ;
#   * Добавить кнопку "изменить расписание" к таймеру РБ; при этом дается 5
#       минут на изменения, потом система каждые 5 минут будет запрашивать
#       либо продолжение планирования, либо активацию нового расписания.
#   * При планирование на сл. день делается в отдельном РБ и не может длиться
#   менее 5 минут. Новое расписание на завтра система должна создать в
#   отдельной папе и назвать соответственно.
#   * В начале нового дня вчерашний файл Day перемещается с папки now в
#   папку history
#   * def Копирование Day из шаблона в папку now или tomorrow;
#   * def Парсинг Day и помещение в базу данных;
#   * def Парсинг permissions и помещение в базу данных;

--------- --------- ---------

Иерарзия






